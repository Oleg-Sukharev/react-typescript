// Aliases type
// 1. primitives, union, intersections
// type Window - can't be created

// Interfaces
// 1. When we want expand interface in future
// 2. Class with implements

Type aliases and interfaces are very similar,
and in many cases you can choose between them freely. 
Almost all features of an interface are available in type, 
the key distinction is that a type cannot be 
re-opened to add new properties vs an interface which is always extendable.

Use interfaces for public APIs since the consumer can then extend them if needed.
Consider using type for your React component props and state,
 for consistency and because it is more constrained.

TL; DR: You can extend interfaces. This is convenient, 
bit it can also make things more complicated.
It's up to you to decide if this is a thing that makes your life 
better or not.
